// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package api

import (
	context "context"
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
	i18n "github.com/nicksnyder/go-i18n/v2/i18n"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

type localizeKey struct{}

func FromContext(ctx context.Context) (*i18n.Localizer, bool) {
	local, ok := ctx.Value(localizeKey{}).(*i18n.Localizer)
	return local, ok
}

func WithLocalize(ctx context.Context, localize *i18n.Localizer) context.Context {
	return context.WithValue(ctx, localizeKey{}, localize)
}

// GetI18nMessage 获取错误信息
func GetI18nMessage(ctx context.Context, id string, args ...interface{}) string {
	if id == "" {
		return id
	}
	config := &i18n.LocalizeConfig{
		MessageID: id,
	}
	if len(args) > 0 {
		config.TemplateData = args[0]
	}
	local, ok := FromContext(ctx)
	if !ok {
		return id
	}
	localize, err := local.Localize(config)
	if err != nil {
		return id
	}
	return localize
}

const ErrorSystemErrorID = "SYSTEM_ERROR"

// IsSystemError 系统错误
func IsSystemError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorSystemErrorID && e.Code == 500
}

// ErrorSystemError 系统错误
func ErrorSystemError(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorSystemErrorID, fmt.Sprintf(format, args...))
}

// ErrorSystemErrorWithContext 系统错误
//
//	带上下文，支持国际化输出元数据
func ErrorSystemErrorWithContext(ctx context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorSystemErrorID, fmt.Sprintf(format, args...)).WithMetadata(map[string]string{
		"1": GetI18nMessage(ctx, "1"),
		"2": GetI18nMessage(ctx, "2"),
	})
}

// ErrorI18nSystemError 系统错误
//  支持国际化输出
func ErrorI18nSystemError(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "系统错误"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(500, ErrorSystemErrorID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorSystemErrorID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(500, ErrorSystemErrorID, msg).WithCause(err1)
		} else {
			err = errors.New(500, ErrorSystemErrorID, localize)
		}
	}

	return err.WithMetadata(map[string]string{
		"1": GetI18nMessage(ctx, "1"),
		"2": GetI18nMessage(ctx, "2"),
	})
}

const ErrorSystemErrorMyUserErrID = "SYSTEM_ERROR__MY_USER_ERR"

// IsSystemErrorMyUserErr 系统错误
//
//	MY_USER_ERR
//	我的用户错误
func IsSystemErrorMyUserErr(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorSystemErrorMyUserErrID && e.Code == 500
}

// ErrorSystemErrorMyUserErr 系统错误
//
//	MY_USER_ERR
//	我的用户错误
func ErrorSystemErrorMyUserErr(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorSystemErrorMyUserErrID, fmt.Sprintf(format, args...))
}

// ErrorSystemErrorMyUserErrWithContext 系统错误
//
//	MY_USER_ERR
//	我的用户错误
//	带上下文，支持国际化输出元数据
func ErrorSystemErrorMyUserErrWithContext(ctx context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorSystemErrorMyUserErrID, fmt.Sprintf(format, args...)).WithMetadata(map[string]string{
		"11": GetI18nMessage(ctx, "11"),
		"22": GetI18nMessage(ctx, "22"),
	})
}

// ErrorI18nSystemErrorMyUserErr 系统错误
//  MY_USER_ERR
//  我的用户错误
//  支持国际化输出
func ErrorI18nSystemErrorMyUserErr(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "我的用户错误"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(500, ErrorSystemErrorMyUserErrID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorSystemErrorMyUserErrID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(500, ErrorSystemErrorMyUserErrID, msg).WithCause(err1)
		} else {
			err = errors.New(500, ErrorSystemErrorMyUserErrID, localize)
		}
	}

	return err.WithMetadata(map[string]string{
		"11": GetI18nMessage(ctx, "11"),
		"22": GetI18nMessage(ctx, "22"),
	})
}

const ErrorUserNotFoundID = "USER_NOT_FOUND"

func IsUserNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorUserNotFoundID && e.Code == 404
}

func ErrorUserNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorUserNotFoundID, fmt.Sprintf(format, args...))
}

func ErrorUserNotFoundWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorUserNotFoundID, fmt.Sprintf(format, args...))
}

func ErrorI18nUserNotFound(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "用户不存在"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(404, ErrorUserNotFoundID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorUserNotFoundID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(404, ErrorUserNotFoundID, msg).WithCause(err1)
		} else {
			err = errors.New(404, ErrorUserNotFoundID, localize)
		}
	}

	return err
}

const ErrorUserAlreadyExistsID = "USER_ALREADY_EXISTS"

func IsUserAlreadyExists(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorUserAlreadyExistsID && e.Code == 400
}

func ErrorUserAlreadyExists(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorUserAlreadyExistsID, fmt.Sprintf(format, args...))
}

func ErrorUserAlreadyExistsWithContext(_ context.Context, format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorUserAlreadyExistsID, fmt.Sprintf(format, args...))
}

func ErrorI18nUserAlreadyExists(ctx context.Context, args ...interface{}) *errors.Error {
	msg := "用户已存在"
	if len(args) > 0 {
		msg = fmt.Sprintf(msg, args...)
	}
	err := errors.New(400, ErrorUserAlreadyExistsID, msg)
	local, ok := FromContext(ctx)
	if ok {
		config := &i18n.LocalizeConfig{
			MessageID: ErrorUserAlreadyExistsID,
		}
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(400, ErrorUserAlreadyExistsID, msg).WithCause(err1)
		} else {
			err = errors.New(400, ErrorUserAlreadyExistsID, localize)
		}
	}

	return err
}
