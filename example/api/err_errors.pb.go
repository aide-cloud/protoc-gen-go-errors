// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package api

import (
	context "context"
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
	i18n "github.com/nicksnyder/go-i18n/v2/i18n"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

type localizeKey struct{}

func FromContext(ctx context.Context) (*i18n.Localizer, bool) {
	local, ok := ctx.Value(localizeKey{}).(*i18n.Localizer)
	return local, ok
}

func WithLocalize(ctx context.Context, localize *i18n.Localizer) context.Context {
	return context.WithValue(context.Background(), localizeKey{}, localize)
}

// GetI18nMessage 获取错误信息
func GetI18nMessage(ctx context.Context, id string, args ...interface{}) string {
	if id == "" {
		return ""
	}
	config := &i18n.LocalizeConfig{
		MessageID: id,
	}
	if len(args) > 0 {
		config.TemplateData = args[0]
	}
	local, ok := FromContext(ctx)
	if !ok {
		return ""
	}
	localize, err := local.Localize(config)
	if err != nil {
		return ""
	}
	return localize
}

func IsSystemError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_SYSTEM_ERROR.String() && e.Code == 500
}

func ErrorSystemError(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_SYSTEM_ERROR.String(), fmt.Sprintf(format, args...)).WithMetadata(map[string]string{"1": "1", "2": "2"})
}

const ErrorI18nSystemErrorID = "SYSTEM_ERROR"

func ErrorI18nSystemError(ctx context.Context, args ...interface{}) *errors.Error {
	config := &i18n.LocalizeConfig{
		MessageID: ErrorI18nSystemErrorID,
	}
	if len(args) > 0 {
		config.TemplateData = args[0]
	}
	err := errors.New(500, ErrorReason_SYSTEM_ERROR.String(), fmt.Sprintf("系统错误", args...))
	local, ok := FromContext(ctx)
	if ok {
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(500, ErrorReason_SYSTEM_ERROR.String(), fmt.Sprintf("系统错误", args...)).WithCause(err1)
		} else {
			err = errors.New(500, ErrorReason_SYSTEM_ERROR.String(), localize)
		}
	}

	return err.WithMetadata(map[string]string{"1": "1", "2": "2"})
}

func IsUserNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_NOT_FOUND.String() && e.Code == 404
}

func ErrorUserNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorReason_USER_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

const ErrorI18nUserNotFoundID = "USER_NOT_FOUND"

func ErrorI18nUserNotFound(ctx context.Context, args ...interface{}) *errors.Error {
	config := &i18n.LocalizeConfig{
		MessageID: ErrorI18nUserNotFoundID,
	}
	if len(args) > 0 {
		config.TemplateData = args[0]
	}
	err := errors.New(404, ErrorReason_USER_NOT_FOUND.String(), fmt.Sprintf("用户不存在", args...))
	local, ok := FromContext(ctx)
	if ok {
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(404, ErrorReason_USER_NOT_FOUND.String(), fmt.Sprintf("用户不存在", args...)).WithCause(err1)
		} else {
			err = errors.New(404, ErrorReason_USER_NOT_FOUND.String(), localize)
		}
	}

	return err
}

func IsUserAlreadyExists(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_ALREADY_EXISTS.String() && e.Code == 400
}

func ErrorUserAlreadyExists(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_USER_ALREADY_EXISTS.String(), fmt.Sprintf(format, args...))
}

const ErrorI18nUserAlreadyExistsID = "USER_ALREADY_EXISTS"

func ErrorI18nUserAlreadyExists(ctx context.Context, args ...interface{}) *errors.Error {
	config := &i18n.LocalizeConfig{
		MessageID: ErrorI18nUserAlreadyExistsID,
	}
	if len(args) > 0 {
		config.TemplateData = args[0]
	}
	err := errors.New(400, ErrorReason_USER_ALREADY_EXISTS.String(), fmt.Sprintf("用户已存在", args...))
	local, ok := FromContext(ctx)
	if ok {
		localize, err1 := local.Localize(config)
		if err1 != nil {
			err = errors.New(400, ErrorReason_USER_ALREADY_EXISTS.String(), fmt.Sprintf("用户已存在", args...)).WithCause(err1)
		} else {
			err = errors.New(400, ErrorReason_USER_ALREADY_EXISTS.String(), localize)
		}
	}

	return err
}
